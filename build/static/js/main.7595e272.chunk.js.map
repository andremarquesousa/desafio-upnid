{"version":3,"sources":["components/scene.module.css","components/init.module.css","components/game.module.css","serviceWorker.js","components/init.js","components/scene.js","components/game.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Init","this","props","start","letsGo","count","player","className","styles","block","namePlayer","type","onChange","e","button","onClick","counter","React","Component","Car","state","moveValue","actions","setState","document","querySelector","car","setAttribute","addEventListener","keyCode","scene","Game","startGame","bind","setInterval","clearInterval","elem","target","value","game","Layout","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7595e272.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scene\":\"scene_scene__I2nfj\",\"car\":\"scene_car__2YHn7\",\"player\":\"scene_player__3ZdVI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"init_block__M_5Qy\",\"text\":\"init_text__2qi5z\",\"button\":\"init_button__3X9X_\",\"counter\":\"init_counter__VyRIm\",\"namePlayer\":\"init_namePlayer__1U5cy\",\"player\":\"init_player__1OSgO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"car\":\"game_car__1GNtG\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport styles from './init.module.css';\n\nclass Init extends React.Component {\n    render() {\n        const {start, letsGo, count, player} = this.props;\n\n        return (\n            <div className={styles.block}>\n                {!letsGo &&\n                    <div>\n                        <p className={styles.namePlayer}>Nome do jogador</p>\n                        <input className={styles.player} type=\"text\" onChange={(e) => {player(e)}} />\n                        <button className={styles.button} type=\"button\" onClick={start}>Come√ßar</button>\n                    </div>\n                }\n\n                {letsGo &&\n                    <p className={styles.counter}>{count}</p>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Init;\n","import React from 'react';\nimport styles from './scene.module.css';\n\nclass Car extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            moveValue: 0\n        }\n    }\n\n    componentDidMount() {\n        const actions = {\n            moveLeft: () => {\n                this.setState({moveValue: this.state.moveValue - 40});\n                document.querySelector(`.${styles.car}`)\n                document.querySelector(`.${styles.car}`).setAttribute('style', `transform: translateX(${this.state.moveValue}px)`);\n            },\n            moveRight: () => {\n                this.setState({moveValue: this.state.moveValue + 40});\n                document.querySelector(`.${styles.car}`).setAttribute('style', `transform: translateX(${this.state.moveValue}px)`);\n            },\n            moveCenter: () => {\n                if (this.state.moveValue !== 0) {\n                    if (this.state.moveValue >= 0 && this.state.moveValue >= 40) {\n                        this.setState({moveValue: this.state.moveValue - 40});\n                    } else  {\n                        this.setState({moveValue: this.state.moveValue + 40});\n                    }\n                    document.querySelector(`.${styles.car}`).setAttribute('style', `transform: translateX(${this.state.moveValue}px)`);\n                }\n            }\n        }\n\n        document.addEventListener('keydown', function(e) {\n            if (e.keyCode === 65 || e.keyCode === 37) {\n                actions.moveLeft();\n            } else if (e.keyCode === 68 || e.keyCode === 39) {\n                actions.moveRight();\n            } else if (e.keyCode === 83 || e.keyCode === 40) {\n                actions.moveCenter();\n            }\n        }); \n    }\n\n    render() {\n        const {player} = this.props;\n\n        return (\n            <div className={styles.scene}>\n                <div className={styles.car}></div>\n                <p className={styles.player}>{player}</p>\n            </div>\n        )\n    }\n}\n\nexport default Car;\n","import React from 'react';\nimport styles from './game.module.css';\nimport Init from './init';\nimport Scene from './scene';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            start: false,\n            letsGo: false,\n            count: 3,\n            player: ''\n        }\n        this.startGame = this.startGame.bind(this)\n        this.namePlayer = this.namePlayer.bind(this)\n    }\n\n    startGame() {\n        this.setState({letsGo: !this.state.start})\n\n        const counter = setInterval(()=>{\n            if (this.state.count <= 0) {\n                clearInterval(counter);\n                this.setState({start: !this.state.start})\n            } else {\n                this.setState({count: this.state.count - 1});\n            }\n        }, 1000);\n    }\n\n    namePlayer(elem) {\n        this.setState({player: elem.target.value})\n    }\n\n    render() {\n        return (\n            <div className={styles.game}>\n                {!this.state.start &&\n                    <Init start={this.startGame} letsGo={this.state.letsGo} count={this.state.count} player={this.namePlayer} />\n                }\n                {this.state.start &&\n                    <Scene player={this.state.player} />\n                }\n                {this.state.letsGo &&\n                    <p>{this.state.count}</p>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './general/base.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './components/game';\n\nconst Layout = (\n    <Game />\n);\n\nReactDOM.render(Layout, document.getElementById('general'));\nserviceWorker.unregister();"],"sourceRoot":""}